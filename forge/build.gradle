import java.nio.file.Files

plugins {
    id("com.kotori316.common")
    id("com.kotori316.publish")
    id("com.kotori316.subprojects")
}

architectury {
    platformSetupLoomIde()
    forge()
}

sourceSets {
    create("genData") {
        scala { SourceDirectorySet set ->
            set.srcDir("src/genData/scala")
        }
        resources { SourceDirectorySet set ->
            set.srcDir("src/genData/resources")
        }
    }
    create("gameTest") {
        scala { SourceDirectorySet set ->
            set.srcDir("src/gameTest/scala")
        }
        resources { SourceDirectorySet set ->
            set.srcDir("src/gameTest/resources")
        }
    }
}

loom {
    forge {
        useForgeLoggerConfig = true
    }

    runs {
        client {
            configName = "Client"
            property("forge.enabledGameTestNamespaces", "fluidtank")
            runDir = "run"
            mods {
                create("main") {
                    sourceSet("main")
                }
                create("gameTest") {
                    sourceSet("gameTest")
                }
            }
        }
        server {
            configName = "Server"
            runDir = "run-server"
        }
        gameTest {
            configName = "GameTest"
            environment("gameTestServer")
            forgeTemplate("gameTestServer")
            vmArg("-ea")
            property("fabric.dli.env", "gameTestServer")
            property("forge.enabledGameTestNamespaces", "fluidtank")
            runDir = "game-test"
            mods {
                create("main") {
                    sourceSet("main")
                }
                create("gameTest") {
                    sourceSet("gameTest")
                }
            }
        }
        data {
            configName = "Data"
            runDir = "run-server"
            programArgs("--mod", "fluidtank_data", "--all",
                    "--output", file("../common/src/generated/resources/").toString(),
                    "--existing", file("../common/src/main/resources/").toString(),
            )
            property("mixin.env.remapRefMap", "true")
            property("mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg")
            data()
            mods {
                create("main") {
                    sourceSet("main")
                }
                create("genData") {
                    sourceSet("genData")
                }
            }
        }
    }
}

configurations {
    developmentForge.extendsFrom common

    genDataCompileClasspath.extendsFrom(compileClasspath)
    genDataRuntimeClasspath.extendsFrom(runtimeClasspath)
    gameTestCompileClasspath.extendsFrom(testCompileClasspath)
    gameTestRuntimeClasspath.extendsFrom(testRuntimeClasspath)
}

repositories {

}

dependencies {
    forge "net.minecraftforge:forge:${project.forge_version}"

    runtimeOnly(group: "com.kotori316", name: "ScalableCatsForce".toLowerCase(Locale.ROOT), version: project.slpVersion, classifier: "with-library") {
        transitive(false)
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // Other mods
    modCompileOnly(group: "curse.maven", name: "jade-324717", version: project.jade_forge_id)
    modCompileOnly(group: "curse.maven", name: "the-one-probe-245211", version: project.top_forge_id) // FIXME
    if (Boolean.parseBoolean(System.getenv("RUN_GAME_TEST"))) {
        modCompileOnly(group: "mezz.jei", name: "jei-1.20.2-forge", version: project.jei_forge_version) { transitive false }
    } else {
        modCompileOnly(group: "mezz.jei", name: "jei-1.20.2-forge", version: project.jei_forge_version) { transitive false }
    }
    modCompileOnly(group: "appeng", name: "appliedenergistics2-forge", version: project.ae2_forge_version) { transitive false }
    // FIXME

    // Test Dependencies.
    // Required these libraries to execute the tests.
    // The library will avoid errors of ForgeRegistry and Capability.
    modImplementation(group: "com.kotori316", name: "test_utility", version: project.testUtilVersion)
    testImplementation(group: "org.mockito", name: "mockito-core", version: project.mockitoCoreVersion)
    testImplementation(group: "org.mockito", name: "mockito-inline", version: project.mockitoInlineVersion)
    forgeRuntimeLibrary(platform(group: "org.junit", name: "junit-bom", version: project.jupiterVersion))
    forgeRuntimeLibrary("org.junit.jupiter:junit-jupiter")

    "genDataImplementation"(sourceSets.main.output)
    "gameTestImplementation"(sourceSets.main.output)
}

tasks.register("checkResourceFiles") {
    doLast {
        def parent = "${loom.files.getUserCache()}/${project.minecraft_version}/forge/${project.forge_version}"
        Files.list(java.nio.file.Path.of(parent))
                .forEach {
                    printf("IsDir %b, Size %d, name %s%n", Files.isDirectory(it), Files.size(it), it)
                }
    }
}

ext {
    changelogHeader = """\
        # Large Fluid Tank for forge
        
        | Dependency | Version |
        | -- | -- |
        | Minecraft | ${project.minecraft_version} |
        | Forge | ${project.forge_version} |
        | scalable-cats-force | ${project.slpVersion} |
        | Applied Energistics 2 | ${project.ae2_forge_version} |
        | Jade | File id: ${project.jade_forge_id} |
        | TheOneProbe | File id: ${project.top_forge_id} |
        """.stripIndent()
}
