plugins {
    id("java")
    id("scala")
    id("architectury-plugin")
    id("dev.architectury.loom")
    id("maven-publish")
    id("signing")
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven {
        name = "ParchmentMC"
        url = "https://maven.parchmentmc.org"
    }
    maven {
        name = "Azure-SLP"
        url = "https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1"
        content {
            includeVersion("org.typelevel", "cats-core_3", project.cats_version)
            includeVersion("org.typelevel", "cats-kernel_3", project.cats_version)
            includeVersion("org.typelevel", "cats-core_2.13", project.cats_version)
            includeVersion("org.typelevel", "cats-kernel_2.13", project.cats_version)
            includeVersion("com.kotori316", "scalable-cats-force-fabric", project.slp_fabric_version)
            includeVersion("com.kotori316", "ScalableCatsForce".toLowerCase(), project.slpVersion)
            // Required these libraries to execute the tests.
            includeVersion("com.kotori316", "test_utility", project.testUtilVersion)
            includeModule("com.kotori316", "test_utility_dependency")
        }
    }
    maven {
        name = "Curse"
        url = "https://www.cursemaven.com"
        content {
            includeGroup("curse.maven")
        }
    }
    maven {
        name = "JEI"
        url = "https://maven.blamejared.com/"
        content {
            includeGroup("mezz.jei")
        }
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev/"
        content {
            includeVersion("appeng", "appliedenergistics2-forge", project.ae2_forge_version)
            includeVersion("appeng", "appliedenergistics2-fabric", project.ae2_fabric_version)
        }
    }
}

architectury {
    minecraft = project.minecraft_version
}

loom {
    silentMojangMappingsLicense()
}

boolean ENABLE_SCALA2 = true

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered {
        it.officialMojangMappings()
        String[] parchmentVersion = String.valueOf(project.parchment_mapping).split("-", 2)
        String parchmentMC = parchmentVersion[0]
        String parchmentDate = parchmentVersion[1]
        it.parchment("org.parchmentmc.data:parchment-$parchmentMC:$parchmentDate@zip")
    }

    implementation(group: "org.scala-lang", name: "scala-library", version: project.scala2_version)
    if (ENABLE_SCALA2 && Boolean.getBoolean("idea.sync.active") || Boolean.parseBoolean(System.getenv("FORCE_SCALA2"))) {
        // In idea sync, use scala2 to enable syntax highlight
        implementation(group: "org.typelevel", name: "cats-core_2.13", version: project.cats_version)
    } else {
        implementation(group: "org.scala-lang", name: "scala3-library_3", version: project.scala3_version)
        implementation(group: "org.typelevel", name: "cats-core_3", version: project.cats_version)
    }
    testImplementation(platform(group: "org.junit", name: "junit-bom", version: project.jupiterVersion))
    testImplementation("org.junit.jupiter:junit-jupiter")
}

tasks.named("test", Test.class) {
    useJUnitPlatform()
    testLogging {
        events("skipped", "failed")
    }
}

tasks.withType(JavaCompile.class).configureEach {
    options.encoding = "UTF-8"
}

tasks.withType(ScalaCompile.class).configureEach {
    if (ENABLE_SCALA2 && Boolean.getBoolean("idea.sync.active") || Boolean.parseBoolean(System.getenv("FORCE_SCALA2"))) {
        scalaCompileOptions.additionalParameters = ["-X" + "source:3"]
    }
    options.encoding = "UTF-8"
}

java {
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
