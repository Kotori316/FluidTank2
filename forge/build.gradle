plugins {
    id("scala")
    id("com.github.johnrengelman.shadow").version("8.1.1")
    id("com.matthewprenger.cursegradle").version("1.4.0")
    id("com.modrinth.minotaur").version("2.+")
}

archivesBaseName = "${project.archives_base_name}-forge"

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {

    }

    runs {
        client {
            configName = "Client"
            property("forge.enabledGameTestNamespaces", "fluidtank")
            runDir = "run"
        }
        server {
            configName = "Server"
            runDir = "run-server"
        }
        gameTest {
            configName = "GameTest"
            environment("gameTestServer")
            forgeTemplate("gameTestServer")
            vmArg("-ea")
            property("fabric.dli.env", "gameTestServer")
            property("forge.enabledGameTestNamespaces", "fluidtank")
            runDir = "game-test"
            source("test")
        }
        data {
            configName = "Data"
            runDir = "run-server"
            programArgs('--mod', "fluidtank", '--all',
                    '--output', file('../common/src/generated/resources/').toString(),
                    '--existing', file('../common/src/main/resources/').toString(),
            )
            data()
            source("test")
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    testCompileClasspath.extendsFrom(compileClasspath)
    testRuntimeClasspath.extendsFrom(runtimeClasspath)
}

sourceSets {
    test {
        if (Boolean.parseBoolean(System.getenv("RUN_GAME_TEST")) ||
                Boolean.parseBoolean(System.getenv("RUN_DATA_GEN"))) {
            // TODO better solution
            output.resourcesDir = sourceSets.main.output.resourcesDir
            // Compiled Java classes should use this directory
            scala.destinationDirectory.set(sourceSets.main.scala.destinationDirectory)
        }
    }
}

repositories {

}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    implementation(group: 'org.scala-lang', name: 'scala-library', version: project.scala2_version)
    implementation(group: 'org.typelevel', name: "cats-core_2.13", version: project.cats_version)

    runtimeOnly(group: 'com.kotori316', name: 'ScalableCatsForce'.toLowerCase(Locale.ROOT), version: project.slpVersion, classifier: 'with-library') {
        transitive(false)
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // Other mods
    modImplementation(group: "curse.maven", name: "jade-324717", version: project.jade_forge_id)
    modImplementation(group: "curse.maven", name: "the-one-probe-245211", version: project.top_forge_id)
    modImplementation(group: "mezz.jei", name: "jei-1.19.4-forge", version: project.jei_forge_version)

    // Test Dependencies.
    // Required these libraries to execute the tests.
    // The library will avoid errors of ForgeRegistry and Capability.
    modImplementation(group: "com.kotori316", name: "test_utility", version: project.testUtilVersion)
    implementation(group: "com.kotori316", name: "test_utility_dependency", version: "1.0-SNAPSHOT")
    forgeRuntimeLibrary(platform(group: "org.junit", name: "junit-bom", version: project.jupiterVersion))
    forgeRuntimeLibrary('org.junit.jupiter:junit-jupiter')
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

final boolean RELEASE_DEBUG = Boolean.parseBoolean(System.getenv("RELEASE_DEBUG") ?: "true")

String createChangelog() {
    return """\
## Large Fluid Tank for forge

"""
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        if (!Boolean.parseBoolean(System.getenv("CI")) || !RELEASE_DEBUG) {
            maven {
                name = "AzureRepository"
                url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
                credentials {
                    username = project.findProperty("azureUserName") ?: System.getenv("AZURE_USER_NAME") ?: ""
                    password = project.findProperty("azureToken") ?: System.getenv("AZURE_TOKEN") ?: "TOKEN"
                }
            }
        }
    }
}

curseforge {
    apiKey = project.findProperty("curseforge_additional-enchanted-miner_key") ?: System.getenv("CURSEFORGE_API_KEY") ?: ""
    project {
        id = "291006"
        changelogType = "markdown"
        changelog = project.createChangelog()
        releaseType = "release"
        addGameVersion("Forge")
        addGameVersion("1.19.4")
        mainArtifact(tasks.remapJar) {
            displayName = "${project.version}-forge"
        }
        addArtifact(tasks.jar)
        addArtifact(tasks.sourcesJar)
        relations {
            requiredDependency 'scalable-cats-force'
        }
    }
    options {
        curseGradleOptions.debug = RELEASE_DEBUG // defaults to false
        javaVersionAutoDetect = false
        forgeGradleIntegration = false
    }
}

modrinth {
    token.set((project.findProperty("modrinthToken") ?: System.getenv("MODRINTH_TOKEN") ?: "") as String)
    projectId = "large-fluid-tank"
    versionType = "release"
    versionName = "${project.version}-forge"
    uploadFile = tasks.remapJar
    getAdditionalFiles().set([
            tasks.jar,
            tasks.sourcesJar,
    ])
    getGameVersions().set([project.minecraft_version])
    getLoaders().set(["forge"])
    changelog = project.createChangelog()
    debugMode = RELEASE_DEBUG
    dependencies {
        required.project("scalable-cats-force")
    }
}
