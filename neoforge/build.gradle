import com.kotori316.plugin.cf.CallVersionCheckFunctionTask
import com.kotori316.plugin.cf.CallVersionFunctionTask

import java.util.stream.Collectors

plugins {
    id("my.common")
    id("architectury-plugin").version("3.4-SNAPSHOT")
    id("dev.architectury.loom").version("1.4-SNAPSHOT")
    id("com.github.johnrengelman.shadow").version("8.1.1")
    id("com.matthewprenger.cursegradle").version("1.4.0")
    id("com.modrinth.minotaur").version("2.+")
    id("com.kotori316.plugin.cf").version("1.+")
}

archivesBaseName = "${project.archives_base_name}-neoforge"

architectury {
    platformSetupLoomIde()
    neoForge()
}

sourceSets {
    create("gameTest") {
        scala { SourceDirectorySet set ->
            set.srcDir("src/gameTest/scala")
        }
        resources { SourceDirectorySet set ->
            set.srcDir("src/gameTest/resources")
        }
    }
}

loom {
    neoForge {
        // useForgeLoggerConfig = true
    }

    runs {
        client {
            configName = "Client"
            property("forge.enabledGameTestNamespaces", "fluidtank")
            runDir = "run"
            mods {
                create("main") {
                    sourceSet("main")
                }
                create("gameTest") {
                    sourceSet("gameTest")
                }
            }
        }
        server {
            configName = "Server"
            runDir = "run-server"
        }
        gameTest {
            configName = "GameTest"
            environment("gameTestServer")
            forgeTemplate("gameTestServer")
            vmArg("-ea")
            property("fabric.dli.env", "gameTestServer")
            property("forge.enabledGameTestNamespaces", "fluidtank")
            runDir = "game-test"
            mods {
                create("main") {
                    sourceSet("main")
                }
                create("gameTest") {
                    sourceSet("gameTest")
                }
            }
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    testCompileClasspath.extendsFrom(compileClasspath)
    testRuntimeClasspath.extendsFrom(runtimeClasspath)

    gameTestCompileClasspath.extendsFrom(testCompileClasspath)
    gameTestRuntimeClasspath.extendsFrom(testRuntimeClasspath)
}

dependencies {
    neoForge("net.neoforged:neoforge:${project.neoforge_version}")

    runtimeOnly(group: "com.kotori316", name: "ScalableCatsForce-NeoForge".toLowerCase(Locale.ROOT), version: project.slpVersion, classifier: "with-library") {
        transitive(false)
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }

    modImplementation(group: "curse.maven", name: "jade-324717", version: project.property("jade_neoforge_id"))
    // Test Dependencies.
    // Required these libraries to execute the tests.
    // The library will avoid errors of ForgeRegistry and Capability.
    modImplementation(group: "com.kotori316", name: "test_utility_neo", version: project.testUtilNeoVersion)
    testImplementation(group: "org.mockito", name: "mockito-core", version: project.mockitoVersion)
    testImplementation(group: "org.mockito", name: "mockito-inline", version: project.mockitoVersion)
    forgeRuntimeLibrary(platform(group: "org.junit", name: "junit-bom", version: project.jupiterVersion))
    forgeRuntimeLibrary("org.junit.jupiter:junit-jupiter")

    "gameTestImplementation"(sourceSets.main.output)
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

afterEvaluate {
    tasks.named("runClient") {
        it.dependsOn("gameTestClasses")
    }
    tasks.named("runGameTest") {
        it.dependsOn("gameTestClasses")
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev-only-platform")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

final boolean RELEASE_DEBUG = Boolean.parseBoolean(System.getenv("RELEASE_DEBUG") ?: "true")

String createChangelog(boolean useLongFormat) {
    String base = """\
        # Large Fluid Tank for neoforge
        
        | Dependency | Version |
        | -- | -- |
        | Minecraft | ${project.minecraft_version} |
        | NeoForge | ${project.neoforge_version} |
        | scalable-cats-force | ${project.slpVersion} |
        """.stripIndent()
    String fromFile = rootProject.file(project.changelog_file).text
    if (useLongFormat) {
        return base + System.lineSeparator() + fromFile
    } else {
        String shortFormat = fromFile.split("---", 2)[0]
        return base + System.lineSeparator() + shortFormat
    }
}

String noHeaderChangelog() {
    String fromFile = rootProject.file(project.changelog_file).text
    String headVersion = fromFile.split("---", 2)[0]
            .lines().filter { s -> !s.startsWith("## ") }.collect(Collectors.joining(System.lineSeparator()))
            .strip()
    return headVersion;
}

tasks.register("checkChangelog") {
    doLast {
        println(createChangelog(true))
        println("-" * 20 + " noHeader " + "-" * 20)
        println(noHeaderChangelog())
    }
}

publishing {
    publications {
        create("mavenNeoForge", MavenPublication.class) {
            artifactId = project.maven_base_name + "-" + project.name + "-" + project.minecraft_version
            from(components["java"])
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        if (!Boolean.parseBoolean(System.getenv("CI")) || !RELEASE_DEBUG) {
            maven {
                name = "AzureRepository"
                url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
                credentials {
                    username = project.findProperty("azureUserName") ?: System.getenv("AZURE_USER_NAME") ?: ""
                    password = project.findProperty("azureToken") ?: System.getenv("AZURE_TOKEN") ?: "TOKEN"
                }
            }
        }
    }
}

curseforge {
    apiKey = project.findProperty("curseforge_additional-enchanted-miner_key") ?: System.getenv("CURSE_TOKEN") ?: ""
    project {
        id = "291006"
        changelogType = "markdown"
        changelog = createChangelog(true)
        releaseType = "release"
        addGameVersion("NeoForge")
        addGameVersion(project.minecraft_version)
        mainArtifact(tasks.remapJar) {
            displayName = "${project.version}-neoforge"
        }
        addArtifact(tasks.shadowJar)
        addArtifact(tasks.sourcesJar)
        relations {
            requiredDependency "scalable-cats-force"
        }
    }
    options {
        curseGradleOptions.debug = RELEASE_DEBUG // defaults to false
        javaVersionAutoDetect = false
        forgeGradleIntegration = false
    }
}

modrinth {
    token.set((project.findProperty("modrinthToken") ?: System.getenv("MODRINTH_TOKEN") ?: "") as String)
    projectId = "large-fluid-tank"
    versionType = "release"
    versionName = "${project.version}-neoforge"
    uploadFile = tasks.remapJar
    getAdditionalFiles().set([
            tasks.shadowJar,
            tasks.sourcesJar,
    ])
    getGameVersions().set([project.minecraft_version])
    getLoaders().set(["neoforge"])
    changelog = createChangelog(false)
    debugMode = RELEASE_DEBUG
    dependencies {
        required.project("scalable-cats-force")
    }
}

remapJar.finalizedBy("jksSignJar")

tasks.register("jksSignJar") {
    dependsOn("remapJar")
    boolean executeCondition = project.hasProperty("jarSign.keyAlias") &&
            project.hasProperty("jarSign.keyLocation") &&
            project.hasProperty("jarSign.storePass")
    onlyIf { executeCondition }
    doLast {
        //noinspection HttpUrlsUsage
        ant.signjar(
                jar: remapJar.archiveFile.get(),
                alias: project.findProperty("jarSign.keyAlias") ?: "",
                keystore: project.findProperty("jarSign.keyLocation") ?: "",
                storepass: project.findProperty("jarSign.storePass") ?: "",
                sigalg: "Ed25519",
                digestalg: "SHA-256",
                tsaurl: "http://timestamp.digicert.com",
        )
    }
}

signing {
    sign(publishing.publications)
    sign(tasks.shadowJar, tasks.remapJar, tasks.sourcesJar)
}

boolean hasGpgSignature = project.hasProperty("signing.keyId") &&
        project.hasProperty("signing.password") &&
        project.hasProperty("signing.secretKeyRingFile")

tasks.withType(Sign).configureEach {
    it.onlyIf {
        hasGpgSignature
    }
}

tasks.withType(AbstractPublishToMaven).configureEach {
    if (hasGpgSignature) {
        it.dependsOn(":neoforge:signRemapJar")
    }
}

tasks.register("registerVersion", CallVersionFunctionTask.class) {
    functionEndpoint = readVersionFunctionEndpoint(project)
    gameVersion = project.findProperty("minecraft_version")
    platform = "neoforge"
    modName = project.findProperty("maven_base_name")
    changelog = noHeaderChangelog()
    homepage = "https://modrinth.com/mod/large-fluid-tank"
}

tasks.register("checkReleaseVersion", CallVersionCheckFunctionTask.class) {
    gameVersion = project.findProperty("minecraft_version")
    platform = "neoforge"
    modName = project.findProperty("maven_base_name")
    version = project.version
    failIfExists = !RELEASE_DEBUG
}

afterEvaluate {
    rootProject.tasks.named("githubRelease").configure { it.dependsOn(":neoforge:assemble") }
}
