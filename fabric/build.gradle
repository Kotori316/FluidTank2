plugins {
    id("scala")
    id("com.github.johnrengelman.shadow").version("8.1.1")
    id("com.matthewprenger.cursegradle").version("1.4.0")
    id("com.modrinth.minotaur").version("2.+")
}

archivesBaseName = "${project.archives_base_name}-fabric"

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    runs {
        client {
            configName = "Fabric Client"
            runDir = "run"
        }
        server {
            configName = "Fabric Server"
            runDir = "run-server"
        }

        gameTest {
            name "Fabric GameTest"
            server()
            vmArg "-ea"
            //noinspection SpellCheckingInspection
            property("fabric-api.gametest")
            //noinspection SpellCheckingInspection
            property("fabric-api.gametest.report-file", "game-test/test-results/game_test.xml")
            runDir = "game-test"
            source sourceSets.test
        }
    }
}

repositories {

}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    testCompileClasspath.extendsFrom(compileClasspath)
    testRuntimeClasspath.extendsFrom(runtimeClasspath)
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    implementation(group: 'org.scala-lang', name: 'scala-library', version: project.scala2_version)
    implementation(group: 'org.scala-lang', name: 'scala3-library_3', version: project.scala3_version)
    implementation(group: 'org.typelevel', name: "cats-core_3", version: project.cats_version)
    modRuntimeOnly(group: 'com.kotori316', name: 'scalable-cats-force-fabric', version: project.slp_fabric_version, classifier: 'dev') { transitive false }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    // Other mods
    modImplementation(group: "curse.maven", name: "jade-324717", version: project.jade_fabric_id)
    modImplementation(group: "mezz.jei", name: "jei-1.20.1-fabric", version: project.jei_fabric_version)
    modImplementation(group: "appeng", name: "appliedenergistics2-fabric", version: project.ae2_fabric_version) { transitive false }
    //noinspection SpellCheckingInspection
    modImplementation(group: "teamreborn", name: "energy", version: "3.0.0")

    testImplementation "net.fabricmc:fabric-loader-junit:${project.fabric_loader_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    injectAccessWidener = true
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

final boolean RELEASE_DEBUG = Boolean.parseBoolean(System.getenv("RELEASE_DEBUG") ?: "true")

String createChangelog() {
    return """\
## Large Fluid Tank for fabric

* Minecraft: ${project.minecraft_version}
* Fabric: ${project.fabric_api_version}
* Fabric Loader: ${project.fabric_loader_version}
"""
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.maven_base_name + "-" + project.name + "-" + project.minecraft_version
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        if (!Boolean.parseBoolean(System.getenv("CI")) || !RELEASE_DEBUG) {
            maven {
                name = "AzureRepository"
                url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
                credentials {
                    username = project.findProperty("azureUserName") ?: System.getenv("AZURE_USER_NAME") ?: ""
                    password = project.findProperty("azureToken") ?: System.getenv("AZURE_TOKEN") ?: "TOKEN"
                }
            }
        }
    }
}

curseforge {
    apiKey = project.findProperty("curseforge_additional-enchanted-miner_key") ?: System.getenv("CURSE_TOKEN") ?: ""
    project {
        id = "411564"
        changelogType = "markdown"
        changelog = project.createChangelog()
        releaseType = "release"
        addGameVersion("Fabric")
        addGameVersion(project.minecraft_version)
        mainArtifact(tasks.remapJar) {
            displayName = "${project.version}-fabric"
        }
        addArtifact(tasks.jar)
        addArtifact(tasks.sourcesJar)
        relations {
            requiredDependency 'scalable-cats-force'
        }
    }
    options {
        curseGradleOptions.debug = RELEASE_DEBUG // defaults to false
        javaVersionAutoDetect = false
        forgeGradleIntegration = false
    }
}

modrinth {
    token.set((project.findProperty("modrinthToken") ?: System.getenv("MODRINTH_TOKEN") ?: "") as String)
    projectId = "large-fluid-tank"
    versionType = "release"
    versionName = "${project.version}-fabric"
    uploadFile = tasks.remapJar
    getAdditionalFiles().set([
            tasks.jar,
            tasks.sourcesJar,
    ])
    getGameVersions().set([project.minecraft_version])
    getLoaders().set(["fabric"])
    changelog = project.createChangelog()
    debugMode = RELEASE_DEBUG
    dependencies {
        required.project("scalable-cats-force")
    }
}

remapJar.finalizedBy("jksSignJar")

tasks.register("jksSignJar") {
    dependsOn("remapJar")
    boolean executeCondition = project.hasProperty("jarSign.keyAlias") &&
            project.hasProperty("jarSign.keyLocation") &&
            project.hasProperty("jarSign.storePass")
    onlyIf { executeCondition }
    doLast {
        //noinspection HttpUrlsUsage
        ant.signjar(
                jar: remapJar.archiveFile.get(),
                alias: project.findProperty("jarSign.keyAlias") ?: "",
                keystore: project.findProperty("jarSign.keyLocation") ?: "",
                storepass: project.findProperty("jarSign.storePass") ?: "",
                sigalg: "Ed25519",
                digestalg: "SHA-256",
                tsaurl: "http://timestamp.digicert.com",
        )
    }
}

signing {
    sign(publishing.publications)
    sign(tasks.jar, tasks.remapJar, tasks.sourcesJar)
}

boolean hasGpgSignature = project.hasProperty("signing.keyId") &&
        project.hasProperty("signing.password") &&
        project.hasProperty("signing.secretKeyRingFile")

tasks.withType(Sign).configureEach {
    it.onlyIf {
        hasGpgSignature
    }
}

tasks.withType(AbstractPublishToMaven).configureEach {
    if (hasGpgSignature) {
        it.dependsOn(":fabric:signRemapJar")
    }
}
