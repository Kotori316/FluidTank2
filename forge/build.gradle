plugins {
    id("scala")
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

archivesBaseName = "${project.archives_base_name}-forge"

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {

    }

    runs {
        client {
            configName = "Client"
            runDir = "run"
        }
        server {
            configName = "Server"
            runDir = "run-server"
        }
        gameTest {
            configName = "GameTest"
            environment("gameTestServer")
            forgeTemplate("gameTestServer")
            vmArg("-ea")
            property("fabric.dli.env", "gameTestServer")
            property("forge.enabledGameTestNamespaces", "fluidtank")
            runDir = "game-test"
            source("test")
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    testCompileClasspath.extendsFrom(compileClasspath)
    testRuntimeClasspath.extendsFrom(runtimeClasspath)
}

sourceSets {
    test {
        // TODO better solution
        output.resourcesDir = sourceSets.main.output.resourcesDir
        // Compiled Java classes should use this directory
        scala.destinationDirectory.set(sourceSets.main.scala.destinationDirectory)
    }
}

repositories {
    maven {
        name = "Azure-SLP"
        url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
        content {
            it.includeModule("com.kotori316", "ScalableCatsForce".toLowerCase())
            // Required these libraries to execute the tests.
            it.includeVersion("com.kotori316", "test_utility", project.testUtilVersion)
            it.includeVersion("com.kotori316", "test_utility_dependency", "1.0-SNAPSHOT")
        }
    }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    implementation(group: 'org.scala-lang', name: 'scala-library', version: project.scala2_version)
    implementation(group: 'org.typelevel', name: "cats-core_2.13", version: project.cats_version)

    runtimeOnly(group: 'com.kotori316', name: 'ScalableCatsForce'.toLowerCase(Locale.ROOT), version: project.slpVersion, classifier: 'with-library') {
        transitive(false)
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // Test Dependencies.
    // Required these libraries to execute the tests.
    // The library will avoid errors of ForgeRegistry and Capability.
    modImplementation(group: "com.kotori316", name: "test_utility", version: project.testUtilVersion)
    implementation(group: "com.kotori316", name: "test_utility_dependency", version: "1.0-SNAPSHOT")
    forgeRuntimeLibrary(platform(group: "org.junit", name: "junit-bom", version: project.jupiterVersion))
    forgeRuntimeLibrary('org.junit.jupiter:junit-jupiter')
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
