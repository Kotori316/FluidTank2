plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.2-SNAPSHOT" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    repositories {
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
    }

    processResources {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    jar {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings loom.layered {
            it.officialMojangMappings()
            String[] parchmentVersion = String.valueOf(project.parchment_mapping).split("-")
            String parchmentMC = parchmentVersion[0]
            String parchmentDate = parchmentVersion[1]
            it.parchment("org.parchmentmc.data:parchment-$parchmentMC:$parchmentDate@zip")
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"
    apply plugin: "signing"

    archivesBaseName = project.archives_base_name
    version = project.mod_version
    group = project.maven_group

    repositories {
        mavenCentral()
        maven {
            name = "Azure-SLP"
            url = "https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1"
            content {
                includeVersion("org.typelevel", "cats-core_3", project.cats_version)
                includeVersion("org.typelevel", "cats-kernel_3", project.cats_version)
                includeVersion("com.kotori316", "scalable-cats-force-fabric", project.slp_fabric_version)
                includeVersion("com.kotori316", "ScalableCatsForce".toLowerCase(), project.slpVersion)
                // Required these libraries to execute the tests.
                includeVersion("com.kotori316", "test_utility", project.testUtilVersion)
                includeModule("com.kotori316", "test_utility_dependency")
            }
        }
        maven {
            name = "Curse"
            url = "https://www.cursemaven.com"
            content {
                includeGroup("curse.maven")
            }
        }
        maven {
            name = "JEI"
            url = "https://maven.blamejared.com/"
            content {
                includeGroup("mezz.jei")
            }
        }
        maven {
            // location of a maven mirror for JEI files, as a fallback
            name = "ModMaven"
            url = "https://modmaven.dev/"
            content {
                includeVersion("appeng", "appliedenergistics2-forge", project.ae2_forge_version)
                includeVersion("appeng", "appliedenergistics2-fabric", project.ae2_fabric_version)
            }
        }
    }

    dependencies {
        testImplementation(platform(group: "org.junit", name: "junit-bom", version: project.jupiterVersion))
        testImplementation('org.junit.jupiter:junit-jupiter')
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "skipped", "failed"
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
    }

    java {
        withSourcesJar()
        toolchain.languageVersion = JavaLanguageVersion.of(17)
    }
}
